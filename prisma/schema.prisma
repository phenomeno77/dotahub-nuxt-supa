generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model UserProfile {
  id               String           @id @default(uuid()) @db.Uuid
  publicId         String           @unique @default(dbgenerated("substr(md5(random()::text), 1, 8)")) @db.VarChar(8)
  username         String
  email            String?          @unique
  avatarUrl        String?
  steamId          String?          @unique
  updatedAt        DateTime         @updatedAt
  role             UserRole         @default(user)
  userStatus       UserStatus       @default(active)
  lastSeenAt       DateTime?      
  postsToday       Int              @default(0)
  commentsToday    Int              @default(0)
  lastPostReset    DateTime         @default(now())
  lastCommentReset DateTime         @default(now())
  bansIssued       BanHistory[]     @relation("UserBannedBy")
  banHistory       BanHistory[]     @relation("UserBanHistory")
  comments         PostComments[]   @relation("UserComments")
  posts            Posts[]          @relation("UserPosts")
  notifications    Notifications[]  @relation("UserNotifications")
  userFeedback     UserFeedback[]   @relation("UserFeedback")
}

model Posts {
  id              Int             @id @default(autoincrement())
  partySize       Int
  positionsNeeded Position[]
  minRank         Rank
  maxRank         Rank
  description     String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  userId          String          @db.Uuid
  postComments    PostComments[]  @relation("PostComments")
  user            UserProfile     @relation("UserPosts", fields: [userId], references: [id], onDelete: Cascade)
  notifications   Notifications[]   @relation("PostNotifications")
}

model PostComments {
  id        Int                 @id @default(autoincrement())
  content   String
  createdAt DateTime            @default(now())
  userId    String              @db.Uuid
  postId    Int
  post      Posts               @relation("PostComments", fields: [postId], references: [id], onDelete: Cascade)
  user      UserProfile         @relation("UserComments", fields: [userId], references: [id], onDelete: Cascade)
  notifications Notifications[] @relation("CommentNotifications")
}

model Notifications {
  id        Int           @id @default(autoincrement())

  user      UserProfile   @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  userId    String        @db.Uuid

  post      Posts?        @relation("PostNotifications", fields: [postId], references: [id], onDelete: Cascade)
  postId    Int?

  comment   PostComments? @relation("CommentNotifications", fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int?

  type      NotificationType
  message   String
  isRead    Boolean       @default(false)
  createdAt DateTime      @default(now())

  username  String?
  avatarUrl String?
}

model UserFeedback {
  id          Int             @id @default(autoincrement())
  user        UserProfile     @relation("UserFeedback", fields: [userId], references: [id], onDelete: Cascade)
  userId      String          @db.Uuid
  type        FeedbackType
  message     String
  status      FeedbackStatus  @default(open) 
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model BanHistory {
  id            Int          @id @default(autoincrement())
  reason        String
  bannedAt      DateTime     @default(now())
  banExpiration DateTime?
  userId        String       @db.Uuid
  bannedById    String?      @db.Uuid
  bannedBy      UserProfile? @relation("UserBannedBy", fields: [bannedById], references: [id])
  user          UserProfile  @relation("UserBanHistory", fields: [userId], references: [id], onDelete: Cascade)
}

enum Position {
  carry
  mid
  offlane
  soft_support @map("soft support")
  hard_support @map("hard support")
}

enum Rank {
  Herald
  Guardian
  Crusader
  Archon
  Legend
  Ancient
  Divine
  Immortal
}

enum UserRole {
  user
  admin
  moderator
}

enum UserStatus {
  active
  banned
}

enum NotificationType {
  comment_on_post
  user_feedback
}

enum FeedbackType {
  bug_report
  feature_request
  user_report
  general_feedback
}

enum FeedbackStatus {
  open
  in_progress
  resolved
}

