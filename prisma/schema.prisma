generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model UserProfile {
  id               String     @id @default(uuid())
  username         String
  email            String?    @unique
  avatarUrl        String?
  steamId          String?    @unique
  password         String?
  isLoggedIn       Boolean    @default(false)
  lastLoginAt      DateTime?
  updatedAt        DateTime   @updatedAt
  role             UserRole   @default(user)
  userStatus       UserStatus @default(active)
  isPremium        Boolean    @default(false)
  premiumExpiresAt DateTime?
  postsToday       Int        @default(0)
  commentsToday    Int        @default(0)
  lastPostReset    DateTime   @default(now())
  lastCommentReset DateTime   @default(now())

  posts      Posts[]       @relation("UserPosts")
  comments   PostComments[] @relation("UserComments")
  banHistory BanHistory[]  @relation("UserBanHistory")
  bansIssued BanHistory[]  @relation("UserBannedBy")
}

model Posts {
  id              Int        @id @default(autoincrement())
  partySize       Int
  positionsNeeded Position[] // array enum
  minRank         Rank
  maxRank         Rank
  description     String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  userId String
  user   UserProfile   @relation("UserPosts", fields: [userId], references: [id], onDelete: Cascade)

  postComments PostComments[] @relation("PostComments")
}

model PostComments {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())

  userId String
  user   UserProfile   @relation("UserComments", fields: [userId], references: [id], onDelete: Cascade)

  postId Int
  post   Posts @relation("PostComments", fields: [postId], references: [id], onDelete: Cascade)

}

model BanHistory {
  id            Int       @id @default(autoincrement())
  reason        String
  bannedAt      DateTime  @default(now())
  banExpiration DateTime?

  userId String
  user   UserProfile   @relation("UserBanHistory", fields: [userId], references: [id], onDelete: Cascade)

  bannedById String?
  bannedBy   UserProfile?   @relation("UserBannedBy", fields: [bannedById], references: [id])

}

enum Position {
  carry
  mid
  offlane
  soft_support @map("soft support")
  hard_support @map("hard support")
}

enum Rank {
  Herald
  Guardian
  Crusader
  Archon
  Legend
  Ancient
  Divine
  Immortal
}

enum UserRole {
  user
  admin
  moderator
}

enum UserStatus {
  active
  banned
  deleted
}
